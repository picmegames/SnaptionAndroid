apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'jacoco'

repositories {
    maven {
        url 'https://maven.fabric.io/public'
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.snaptiongame.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 19
        versionName "1.0.5"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
            buildConfigField "String", "SERVER_ENDPOINT", "\"https://35.184.24.183/\""
        }

        release {
            debuggable false
            minifyEnabled true
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "SERVER_ENDPOINT", "\"https://api.snaptiongame.com/\""
        }
    }

    signingConfigs {
        debug {
            storeFile file('keystores/debug.keystore')
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
        jumboMode true
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Testing Dependencies

    // AssertJ
    testCompile "org.assertj:assertj-core:${assertjVersion}"

    // JUnit
    testCompile "junit:junit:${junitVersion}"

    // Mockito
    testCompile "org.mockito:mockito-core:${mockitoVersion}"

    // Robolectric
    testCompile "org.robolectric:robolectric:${robolectricVersion}"
    testCompile "org.robolectric:shadows-support-v4:${robolectricVersion}"

    // Support Testing Libraries
    androidTestCompile "com.android.support:support-annotations:${supportLibVersion}"
    androidTestCompile "com.android.support.test.espresso:espresso-core:${espressoVersion}"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:${espressoVersion}"
    androidTestCompile "com.android.support.test:runner:${androidTestVersion}"
    androidTestCompile "com.android.support.test:rules:${androidTestVersion}"

    // Developer Dependencies

    // Butterknife
    compile "com.jakewharton:butterknife:${butterknifeVersion}"
    apt "com.jakewharton:butterknife-compiler:${butterknifeVersion}"

    // Timber
    compile "com.jakewharton.timber:timber:${timberVersion}"

    // Application Dependencies

    // Branch
    compile ("io.branch.sdk.android:library:${branchVersion}") {
        exclude module: 'answers-shim'
    }

    // Circle ImageView
    compile "de.hdodenhof:circleimageview:${circleImageViewVersion}"

    // Crashlytics
    compile ("com.crashlytics.sdk.android:crashlytics:${crashlyticsVersion}") {
        transitive = true
    }

    // Facebook Login
    compile "com.facebook.android:facebook-android-sdk:${facebookSdkVersion}"

    // Firebase
    compile "com.google.firebase:firebase-core:${playServicesVersion}"
    compile "com.google.firebase:firebase-messaging:${playServicesVersion}"

    // Glide
    compile "com.github.bumptech.glide:glide:${glideVersion}"
    compile "jp.wasabeef:glide-transformations:${glideTransformationsVersion}"

    // Google Login
    compile "com.google.android.gms:play-services-auth:${playServicesVersion}"

    // Lottie
    compile "com.airbnb.android:lottie:${lottieVersion}"

    // Material Dialogs
    compile "com.afollestad.material-dialogs:core:${materialDialogsVersion}"

    // Material Showcase View
    compile "com.github.deano2390:MaterialShowcaseView:${materialShowcaseView}"

    // Nachos
    compile "com.hootsuite.android:nachos:${nachosVersion}"

    // OkHttp
    compile "com.squareup.okhttp3:okhttp-urlconnection:${okHttpVersion}"
    compile "com.squareup.okhttp3:logging-interceptor:${okHttpVersion}"

    // PhotoView
    compile "com.github.chrisbanes:PhotoView:${photoViewVersion}"

    // Retrofit
    compile "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    compile "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    compile "com.squareup.retrofit2:adapter-rxjava2:${retrofitVersion}"

    // RxJava
    compile "io.reactivex.rxjava2:rxandroid:${rxAndroidVersion}"
    compile "io.reactivex.rxjava2:rxjava:${rxJavaVersion}"

    // Support Libraries
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:palette-v7:${supportLibVersion}"

    // Text Drawable
    compile "com.amulyakhare:com.amulyakhare.textdrawable:${textDrawableVersion}"
}

apply plugin: 'com.google.gms.google-services'