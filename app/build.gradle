apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'jacoco'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.snaptiongame.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 5
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
        }
        release {
            debuggable false
            minifyEnabled true
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    signingConfigs {
        debug {
            storeFile file('keystores/debug.keystore')
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storePassword 'android'
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Unit Testing Libraries
    androidTestCompile "com.android.support:support-annotations:$rootProject.supportLibVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestCompile "com.android.support.test:runner:$rootProject.androidTestVersion"
    androidTestCompile "com.android.support.test:rules:$rootProject.androidTestVersion"

    // JUnit
    testCompile "junit:junit:$rootProject.junitVersion"

    // AssertJ
    testCompile "org.assertj:assertj-core:$rootProject.assertjVersion"

    // Mockito
    testCompile "org.mockito:mockito-core:$rootProject.mockitoVersion"

    // Robolectric
    testCompile "org.robolectric:robolectric:$rootProject.robolectricVersion"
    testCompile "org.robolectric:shadows-support-v4:$rootProject.robolectricVersion"

    // Json
    testCompile "org.json:json:$rootProject.jsonVersion"

    // Android Support Libraries
    compile "com.android.support:appcompat-v7:$rootProject.supportLibVersion"
    compile "com.android.support:design:$rootProject.supportLibVersion"
    compile "com.android.support:palette-v7:$rootProject.supportLibVersion"

    // Leak Canary
    debugCompile "com.squareup.leakcanary:leakcanary-android:$rootProject.leakCanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakCanaryVersion"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakCanaryVersion"

    // Timber
    compile "com.jakewharton.timber:timber:$rootProject.timberVersion"

    // Circle ImageView
    compile "de.hdodenhof:circleimageview:$rootProject.circleImageViewVersion"

    // Text Drawable
    compile "com.amulyakhare:com.amulyakhare.textdrawable:$rootProject.textDrawableVersion"

    // Material Dialogs
    compile "com.afollestad.material-dialogs:core:$rootProject.materialDialogsVersion"

    // Nachos
    compile "com.hootsuite.android:nachos:$rootProject.nachosVersion"

    // Facebook Login
    compile "com.facebook.android:facebook-android-sdk:$rootProject.facebookSdkVersion"

    // Google Login
    compile "com.google.android.gms:play-services-auth:$rootProject.playServicesVersion"

    // Firebase
    compile "com.google.firebase:firebase-core:$rootProject.playServicesVersion"
    compile "com.google.firebase:firebase-messaging:$rootProject.playServicesVersion"
    compile "com.google.firebase:firebase-crash:$rootProject.playServicesVersion"

    // Butterknife
    compile "com.jakewharton:butterknife:$rootProject.butterknifeVersion"
    apt "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"

    // Glide
    compile "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    compile "jp.wasabeef:glide-transformations:$rootProject.glideTransformationsVersion"

    // PhotoView
    compile "com.github.chrisbanes:PhotoView:$rootProject.photoViewVersion"

    // OkHttp
    compile "com.squareup.okhttp3:okhttp-urlconnection:$rootProject.okHttpVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$rootProject.okHttpVersion"

    // Retrofit
    compile "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava2:$rootProject.retrofitVersion"

    // RxJava
    compile "io.reactivex.rxjava2:rxandroid:$rootProject.rxAndroidVersion"
    compile "io.reactivex.rxjava2:rxjava:$rootProject.rxJavaVersion"

    // Branch.io
    compile ("io.branch.sdk.android:library:$rootProject.branchioVersion") {
        exclude module: 'answers-shim'
    }
}

apply plugin: 'com.google.gms.google-services'